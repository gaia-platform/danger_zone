
/////////////////////////////////////////////
// Copyright (c) Gaia Platform LLC
// All rights reserved.
/////////////////////////////////////////////

#include "gaia/logger.hpp"

#include "gaia_danger_zone.h"
#include "gaia_db.hpp"
#include "danger_zone.hpp"
#include "zones.hpp"

#define DirectionZoneCodeDefault 6

// Set these to what you want to log, add or subtract at will.
// The values match the names from Gaia Mine Sim.
std::vector<std::string> topic_names{"/image", "/scan"};
std::vector<std::string> topic_types{"sensor_msgs/Image", "sensor_msgs/LaserScan"};

// Set this to an existing directory + desired log name.
std::string log_file_base_name = "ros-topics-logs/retrolog";

const int32_t c_log_window_seconds = 30;
const int32_t c_log_seconds_past = 5;
const int32_t c_log_seconds_forward = c_log_window_seconds - c_log_seconds_past;

using namespace gaia::danger_zone;

ruleset objects_detection
{
    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// Handle the insertion of a detection record.
    /// Determine and set the zones of all detected objects
    /// and then mark the detection record as having been processed.
    ///
    /// Triggered by:
    ///   processing of detection messages in subscriber_node_t::detection3d_callback().
    ///
    /// Triggers:
    ///   on_update(d_object.zone_id)
    ///   on_update(detection.processed)
    ///////////////////////////////////////////////////////////////////////////////////////////////
    on_insert(detection)
    {
        for (detection->obj:d_object)
        {
            // Sets the zone using the distance from the sensor to the detected object.
            // pos_y represents the vertical offset, so we need to use pos_x and pos_z for calculations.
            obj.zone_id = zones_t::get_range_zone_id(obj.pos_x, obj.pos_z);
        }

        detection.processed = true;
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// Use the insertion of a detection to evaluate
    /// whether it's time to perform the logging of another window of events.
    /// A different rule with the same trigger is used to process unrelated actions.
    ///
    /// Triggered by:
    ///   processing of detection messages in subscriber_node_t::detection3d_callback().
    ///
    /// Triggers:
    ///   on_insert(send_trigger_log_action)
    ///////////////////////////////////////////////////////////////////////////////////////////////
    on_insert(detection)
    {
        // Use this opportunity to check if we need to issue a new logging request
        // for a time window in the past.
        // A logging request is capped to c_log_window_seconds at a time.
        // If a succession of events requires logging more than c_log_window_seconds,
        // we will just issue multiple requests, after each time window elapses.
        //
        // Time of detections is not using standard format,
        // so instead of using the current system time,
        // we'll use the time of the last detection as "current time".
        check_and_log(detection.seconds, detection.nanoseconds, c_log_window_seconds);
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// When the zone of a detected object is updated,
    /// check if the object has transitioned into a different zone.
    ///
    /// Triggered by:
    ///   on_insert(detection) (first rule)
    ///
    /// Triggers:
    ///   on_insert(zone_transition_event)
    ///////////////////////////////////////////////////////////////////////////////////////////////
    on_update(d_object.zone_id)
    {
        // Find the object corresponding to the detection.
        auto obj = object_t::list()
           .where(object_expr::id == d_object.object_id)
           .begin();

        // If its zone changed, create a zone transition event.
        if (obj->zone_id() != d_object.zone_id)
        {
            zone_transition_event.insert(
                object_id: obj->id(),
                from_zone_id: obj->zone_id(),
                to_zone_id: d_object.zone_id,
                seconds: d_object.seconds,
                nanoseconds: d_object.nanoseconds);
        }
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// Create an array of messages for a processed detection
    /// and communicate the zones of each detected object back to the simulator.
    ///
    /// Triggered by:
    ///   on_insert(detection) (first rule)
    ///
    /// Triggers:
    ///   no other rules.
    ///////////////////////////////////////////////////////////////////////////////////////////////
    on_update(detection.processed)
    {
        std::shared_ptr<obstacles_t> obstacles = obstacles_t::new_instance();

        // Find the direction of the object relative to the sensor.
        uint8_t direction_zone = DirectionZoneCodeDefault;

        for (detection->obj:d_object) {
            // Create a message for each obstacle.
            // TODO: the first argument is the class_id and is currently not used
            //  by the simulation. Putting a placeholder for now.
            obstacles->add(
                "_", obj.zone_id, direction_zone,
                obj.pos_x, obj.pos_y, obj.pos_z,
                obj.size_x, obj.size_y, obj.size_z,
                obj.orient_x, obj.orient_y, obj.orient_z, obj.orient_w);
        }

        // Now that all obstacle messages have been collected, we can send them.
        danger_zone_t::get_instance()->send_obstacle_array_message(
            obstacles,
            detection.frame_id, detection.seconds, detection.nanoseconds);
    }
}

/**
 * This ruleset handles the transition of an object from one zone to
 * another. The ruleset is marked as serial_group() to make the
 * rules within it run serially. This avoids transaction conflicts
 * when adding/removing objects from the zone table.
 */
ruleset zone_transition : serial_group()
{
    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// Evaluate whether a zone transition should trigger data logging.
    ///
    /// Triggered by:
    ///   on_update(d_object.zone_id)
    ///
    /// Triggers:
    ///   no other rules.
    ///////////////////////////////////////////////////////////////////////////////////////////////
    on_insert(event:zone_transition_event)
    {
        auto obj = object_t::list()
            .where(object_expr::id == event.object_id)
            .begin();

        gaia_log::app().info(
            "Object:{} transitioning from zone:{} to zone:{}",
            event.object_id,
            zones_t::zone_id_str(event.from_zone_id),
            zones_t::zone_id_str(event.to_zone_id));

        object_writer obj_w = obj->writer();
        obj_w.zone_id = event.to_zone_id;
        obj_w.update_row();

        if (zones_t::is_object_moving_away(event.from_zone_id, event.to_zone_id))
        {
            // TODO: in future we may stop logging here if appropriate.
            return;
        }

        if (obj->zone_id() == obj->object_class().zone_id())
        {
            // Update our logging state to cover this event.
            update_logging(
                event.seconds, event.nanoseconds,
                c_log_seconds_past, c_log_seconds_forward);
        }

        // We no longer need the event record in the database.
        event.remove();
    }
}

ruleset snapshotter
{
    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// Process a data logging request.
    /// This is performed using a dedicated rule, to ensure that such requests
    /// do not get retried due to a database update conflict.
    ///
    /// Triggered by:
    ///   on_insert(detection) (second rule)
    ///
    /// Triggers:
    ///   no other rules.
    ///////////////////////////////////////////////////////////////////////////////////////////////
    on_insert(action:send_trigger_log_action)
    {
        danger_zone_t::get_instance()->trigger_log(
            action.begin_seconds, action.begin_nanoseconds,
            action.end_seconds, action.end_nanoseconds,
            log_file_base_name,
            topic_names, topic_types);

        action.remove();
    }
};
